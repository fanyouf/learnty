(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BGBlocks = /** @class */ (function () {
    function BGBlocks(_a) {
        var maxX = _a.maxX, maxY = _a.maxY;
        this.matrix = [];
        for (var i = 0; i < maxY; i++) {
            var arr = new Array(maxX).fill(0);
            this.matrix.push(arr);
        }
    }
    BGBlocks.prototype.isCrash = function (block) {
        var _this = this;
        try {
            return !!block.matrix.find(function (item) { return _this.matrix[block.y + item.y + 1][block.x + item.x]; });
        }
        catch (e) {
            return true;
        }
        return true;
    };
    BGBlocks.prototype.isCrashMatrix = function (matrix) {
        var _this = this;
        try {
            return !!matrix.find(function (item) { return _this.matrix[item.y][item.x]; });
        }
        catch (e) {
            return true;
        }
    };
    BGBlocks.prototype.merge = function (block) {
        var _this = this;
        block.matrix.forEach(function (item) {
            _this.matrix[block.y + item.y][block.x + item.x] = 1;
        });
    };
    return BGBlocks;
}());
exports.default = BGBlocks;

},{}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var interface_1 = require("./interface");
var MATRIX_ARR = [
    [{ x: 0, y: 0 }, { x: 0, y: 1 }, { x: 0, y: 2 }, { x: 1, y: 2 }],
    [{ x: 0, y: 1 }, { x: 1, y: 1 }, { x: 2, y: 1 }, { x: 2, y: 2 }],
    [{ x: 2, y: 0 }, { x: 2, y: 1 }, { x: 2, y: 2 }, { x: 1, y: 2 }],
    [{ x: 0, y: 1 }, { x: 0, y: 2 }, { x: 1, y: 2 }, { x: 2, y: 2 }]
];
var BlockL = /** @class */ (function () {
    function BlockL(index) {
        if (index === void 0) { index = Math.floor(Math.random() * 5); }
        this.type = interface_1.BLOCK_TYPE_T.L;
        this.matrix = [];
        this.index = 0;
        this.x = 0;
        this.y = 0;
        this.index = index % 4;
        this.matrix = MATRIX_ARR[this.index];
        console.info("constructor....");
    }
    BlockL.prototype.getMatrix = function (dir) {
        var _this = this;
        if (dir === void 0) { dir = ""; }
        return this.matrix.map(function (item) {
            var o = { x: 0, y: 0 };
            o.x = item.x + _this.x;
            o.y = item.y + _this.y;
            o.x = dir === "left" ? o.x - 1 : o.x;
            o.x = dir === "right" ? o.x + 1 : o.x;
            return o;
        });
    };
    BlockL.prototype.change = function () {
        this.index = (this.index + 1) % 4;
        this.matrix = MATRIX_ARR[this.index];
        return this.getMatrix();
    };
    BlockL.prototype.canMoveLeft = function (bbBlocks) {
        var _this = this;
        // debugger;
        var minx = Math.min.apply(Math, this.matrix.map(function (item) { return _this.x + item.x; }));
        if (minx === 0)
            return false;
        var shadeMatrix = this.getMatrix("left");
        return !bbBlocks.isCrashMatrix(shadeMatrix);
    };
    BlockL.prototype.moveLeft = function () {
        this.x = this.x - 1;
        return this.getMatrix();
    };
    BlockL.prototype.moveRight = function () {
        this.x = this.x + 1;
        return this.getMatrix();
    };
    BlockL.prototype.moveDown = function (maxY) {
        if (this.isGoBottom(maxY))
            return false;
        this.y = this.y + 1;
        return true;
    };
    BlockL.prototype.isGoBottom = function (maxY) {
        var yList = this.matrix.map(function (item) { return item.y; });
        var curY = Math.max.apply(Math, yList);
        console.info(this.y, curY, maxY);
        return this.y + curY >= maxY - 1;
    };
    return BlockL;
}());
exports.default = BlockL;

},{"./interface":4}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BlockL_1 = require("./BlockL");
var BackGroundBlock_1 = require("./BackGroundBlock");
var Game = (function () {
    var game = null;
    var _Game = /** @class */ (function () {
        function _Game(_a) {
            var context = _a.context, maxX = _a.maxX, maxY = _a.maxY;
            this.frameIndex = 0;
            if (!game) {
                game = this;
            }
            game.addEventListener();
            //   console.info(context);
            game.context = context;
            game.maxX = maxX;
            game.maxY = maxY;
            game.curBlock = new BlockL_1.default();
            game.bgBlocks = new BackGroundBlock_1.default({ maxX: maxX, maxY: maxY });
            return game;
        }
        _Game.prototype.eventKeyUp = function (e) {
            var _this = this;
            console.info(e);
            if (e.keyCode === 38) {
                _this.curBlock.change();
            }
            else if (e.keyCode === 39) {
                _this.curBlock.moveRight();
            }
            else if (e.keyCode === 37) {
                if (_this.curBlock.canMoveLeft(_this.bgBlocks)) {
                    _this.curBlock.moveLeft();
                }
            }
        };
        _Game.prototype.addEventListener = function () {
            document.addEventListener("keyup", this.eventKeyUp.bind(this));
        };
        _Game.prototype.drawCurBlock = function () {
            var ctx = this.context;
            ctx.fillStyle = "green";
            this.curBlock.getMatrix().forEach(function (item) {
                ctx.fillRect(item.x * 10, item.y * 10, 9, 9);
            });
        };
        _Game.prototype.drawBGBlocks = function () {
            var ctx = this.context;
            ctx.fillStyle = "green";
            this.bgBlocks.matrix.forEach(function (row, y) {
                row.forEach(function (val, x) {
                    val && ctx.fillRect(x * 10, y * 10, 9, 9);
                });
            });
        };
        _Game.prototype.start = function () {
            this.frameIndex++;
            this.context.clearRect(0, 0, this.context.canvas.width, this.context.canvas.height);
            //   console.info(this.frameIndex);
            if (this.frameIndex % Math.ceil(1000 / 50) === 0) {
                if (this.bgBlocks.isCrash(this.curBlock)) {
                    this.bgBlocks.merge(this.curBlock);
                    this.curBlock = new BlockL_1.default();
                }
                else {
                    if (this.curBlock.moveDown(this.maxY)) {
                    }
                    else {
                        this.bgBlocks.merge(this.curBlock);
                        this.curBlock = new BlockL_1.default();
                    }
                }
            }
            this.drawCurBlock();
            this.drawBGBlocks();
            requestAnimationFrame(this.start.bind(this));
        };
        return _Game;
    }());
    return _Game;
})();
exports.default = Game;

},{"./BackGroundBlock":1,"./BlockL":2}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BLOCK_TYPE_T;
(function (BLOCK_TYPE_T) {
    BLOCK_TYPE_T["L"] = "L";
    BLOCK_TYPE_T["N"] = "N";
    BLOCK_TYPE_T["Z"] = "Z";
    BLOCK_TYPE_T["O"] = "O";
})(BLOCK_TYPE_T || (BLOCK_TYPE_T = {}));
exports.BLOCK_TYPE_T = BLOCK_TYPE_T;

},{}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Game_1 = require("./Game");
var canvas = document.getElementById("myCanvas");
var context = canvas.getContext("2d");
var maxX = 20;
var maxY = 20;
var game = new Game_1.default({ context: context, maxX: maxX, maxY: maxY });
game.start();

},{"./Game":3}]},{},[5])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
