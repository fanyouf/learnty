(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var interface_1 = require("./interface");
var util_1 = require("./util");
var Spark_1 = require("./Spark");
var Firework = /** @class */ (function () {
    function Firework(_a) {
        var x = _a.x, y = _a.y;
        this.reset({ x: x, y: y });
    }
    Firework.prototype.reset = function (_a) {
        var x = _a.x, y = _a.y;
        this.x = x;
        this.y = y;
        this.curAge = 0;
        this.dy = 100 + util_1.R(20);
        this.dx = -5 + util_1.R(10);
        this.phase = interface_1.PHASE.rise;
        this.sparkPerNumber = 10;
        this.sparks = [];
        for (var n = 0; n < this.sparkPerNumber; n++) {
            var dela = ((180 / this.sparkPerNumber) * n * Math.PI) / 180;
            var t = Math.random() * 50 + 30;
            var spark = new Spark_1.default({
                vx: t * Math.cos(dela),
                vy: t * Math.sin(dela),
                weight: Math.random() * 0.3 + 0.03,
                red: Math.floor(Math.random() * 2),
                green: Math.floor(Math.random() * 2),
                blue: Math.floor(Math.random() * 2)
            });
            if (Math.random() > 0.5)
                spark.vx = -spark.vx;
            if (Math.random() > 0.5)
                spark.vy = -spark.vy;
            this.sparks.push(spark);
        }
    };
    Firework.prototype.run = function (context) {
        var _this = this;
        if (this.curAge > 9 && Math.random() < 0.01) {
            this.reset({
                x: 200 + Math.floor(Math.random() * 400),
                y: 500 + Math.floor(Math.random() * 200)
            });
        }
        else {
            this.curAge += 1 / 25;
            this.phase = this.curAge > this.dy / util_1.G ? interface_1.PHASE.expolde : interface_1.PHASE.rise;
            this.sparks.forEach(function (element) {
                element.run(context, _this);
            });
            //   console.info(this.curAge);
        }
    };
    return Firework;
}());
exports.default = Firework;

},{"./Spark":3,"./interface":4,"./util":6}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Firework_1 = require("./Firework");
var Game = {
    actors: [],
    init: function (_a) {
        var context = _a.context, _b = _a.numberOfFirework, numberOfFirework = _b === void 0 ? 1 : _b;
        console.info(context);
        this.context = context;
        this.numberOfFirework = numberOfFirework;
        for (var i = 0; i < numberOfFirework; i++) {
            var firework = new Firework_1.default({
                x: 200 + Math.floor(Math.random() * 400),
                y: 500 + Math.floor(Math.random() * 200)
            });
            this.actors.push(firework);
        }
    },
    start: function () {
        var _this = this;
        this.context.clearRect(0, 0, this.context.canvas.width, this.context.canvas.height);
        this.actors.forEach(function (actor) {
            actor.run(_this.context);
        });
        requestAnimationFrame(Game.start.bind(this));
    }
};
exports.default = Game;

},{"./Firework":1}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var interface_1 = require("./interface");
var util_1 = require("./util");
var Spark = /** @class */ (function () {
    function Spark(_a) {
        var vx = _a.vx, vy = _a.vy, weight = _a.weight, red = _a.red, green = _a.green, blue = _a.blue;
        this.vx = vx;
        this.vy = vy;
        this.weight = weight;
        this.red = red;
        this.green = green;
        this.blue = blue;
        this.curAge = 0;
    }
    Spark.prototype[interface_1.PHASE.rise] = function (context, firework) {
        var i = 15;
        context.beginPath();
        //     this.y =
        this.x = firework.x + firework.curAge * firework.dx;
        this.y =
            firework.y -
                firework.dy * firework.curAge +
                0.5 * util_1.G * firework.curAge * firework.curAge;
        context.fillStyle = "rgba(" + 255 + "," + i * 17 + ",255,1)";
        context.rect(this.x, this.y + Math.random() * i - i / 2, 4, 4);
        context.fill();
        // console.info(firework.x, firework.y);
        this.curAge = firework.curAge;
    };
    Spark.prototype[interface_1.PHASE.expolde] = function (context, firework) {
        var t = firework.curAge - this.curAge;
        var dxx = Math.max(0.5, 1 - t / 10);
        console.info(dxx);
        var x = this.x + this.vx * t * dxx;
        var y = this.y - this.vy * t + (1 / 2) * util_1.G * t * t;
        var fade = 1 * 20 - firework.curAge * 2;
        var r = Math.max(0, Math.floor(255 - t * 10));
        var g = util_1.R(255);
        var b = util_1.R(255);
        var de = 1 - t / 10;
        context.beginPath();
        context.fillStyle = "rgba(" + r + "," + g + "," + b + "," + de + ")";
        context.rect(x, y, 4, 4);
        context.fill();
        // console.info("explode");
        // console.info(x, y);
    };
    Spark.prototype.run = function (context, firework) {
        this[firework.phase](context, firework);
    };
    return Spark;
}());
exports.default = Spark;

},{"./interface":4,"./util":6}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var PHASE;
(function (PHASE) {
    PHASE["expolde"] = "expolde";
    PHASE["rise"] = "rise";
})(PHASE || (PHASE = {}));
exports.PHASE = PHASE;

},{}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Game_1 = require("./Game");
var canvas = document.getElementById("myCanvas");
var context = canvas.getContext("2d");
Game_1.default.init({ context: context, numberOfFirework: 1 });
Game_1.default.start();

},{"./Game":2}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function R(max) {
    if (max === void 0) { max = 1; }
    return Math.random() * max;
}
exports.R = R;
var G = 9.8 * 2;
exports.G = G;

},{}]},{},[5])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
