(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var interface_1 = require("./interface");
var MATRIX_ARR = [
    [{ x: 0, y: 0 }, { x: 0, y: 1 }, { x: 0, y: 2 }, { x: 1, y: 2 }],
    [{ x: 0, y: 1 }, { x: 1, y: 1 }, { x: 2, y: 1 }, { x: 2, y: 2 }],
    [{ x: 2, y: 0 }, { x: 2, y: 1 }, { x: 2, y: 2 }, { x: 1, y: 2 }],
    [{ x: 0, y: 1 }, { x: 0, y: 2 }, { x: 2, y: 1 }, { x: 2, y: 2 }],
];
var BlockL = /** @class */ (function () {
    function BlockL(index) {
        if (index === void 0) { index = Math.floor(Math.random() * 5); }
        this.type = interface_1.BLOCK_TYPE_T.L;
        this.matrix = [];
        this.index = 0;
        this.x = 0;
        this.y = 0;
        this.index = index % 4;
        this.matrix = MATRIX_ARR[this.index];
    }
    BlockL.prototype.getMatrix = function () {
        var _this = this;
        return this.matrix.map(function (item) {
            var o = { x: 0, y: 0 };
            o.x = item.x + _this.x;
            o.y = item.y + _this.y;
            return o;
        });
    };
    BlockL.prototype.change = function () {
        this.index = (this.index + 1) % 4;
        this.matrix = MATRIX_ARR[this.index];
        return this.getMatrix();
    };
    BlockL.prototype.moveLeft = function () {
        this.x = this.x - 1;
        return this.getMatrix();
    };
    BlockL.prototype.moveRight = function () {
        this.x = this.x + 1;
        return this.getMatrix();
    };
    return BlockL;
}());
exports.default = BlockL;
},{"./interface":3}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BlockL_1 = require("./BlockL");
var Game = {
    eventKeyUp: function (e) {
        console.info(e);
        if (e.keyCode === 38) {
            this.changeCurBlock();
        }
    },
    addEventListener: function () {
        document.addEventListener("keyup", Game.eventKeyUp);
    },
    init: function (_a) {
        var context = _a.context, _b = _a.numberOfFirework, numberOfFirework = _b === void 0 ? 5 : _b;
        this.addEventListener();
        console.info(context);
        this.context = context;
        this.curBlock = new BlockL_1.default();
    },
    drawCurBlock: function () {
        var ctx = this.context;
        ctx.fillStyle = "green";
        this.curBlock.getMatrix().forEach(function (item) {
            ctx.fillRect(item.x * 10, item.y * 10, 9, 9);
        });
    },
    start: function () {
        this.context.clearRect(0, 0, this.context.canvas.width, this.context.canvas.height);
        // console.info("asdfsd")
        this.drawCurBlock();
        requestAnimationFrame(Game.start.bind(this));
    }
};
exports.default = Game;
},{"./BlockL":1}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var BLOCK_TYPE_T;
(function (BLOCK_TYPE_T) {
    BLOCK_TYPE_T["L"] = "L";
    BLOCK_TYPE_T["N"] = "N";
    BLOCK_TYPE_T["Z"] = "Z";
    BLOCK_TYPE_T["O"] = "O";
})(BLOCK_TYPE_T || (BLOCK_TYPE_T = {}));
exports.BLOCK_TYPE_T = BLOCK_TYPE_T;
},{}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Game_1 = require("./Game");
var canvas = document.getElementById('myCanvas');
var context = canvas.getContext('2d');
Game_1.default.init({ context: context, numberOfFirework: 1 });
Game_1.default.start();
},{"./Game":2}]},{},[4])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
